<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cxf-camel="http://camel.apache.org/schema/cxf"
       xmlns:cxf-http-conf="http://cxf.apache.org/transports/http/configuration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd">

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
    <!--
  For CXF endpoint definitions made like this, the address attribute is host/port-relative.Cf
  http://qnalist.com/questions/2220245/cxf-endpoint-no-service-was-found-issue.

   The serviceName attribute is required, even though it's specified in the WSDL.  And because you can't
   currently include namespace definitions in this attribute, e.g. "http:{bla}serviceName", you need to declare
   the namespace by an xmlns: declaration.
 -->
    <cxf-camel:cxfEndpoint id="determineEligibleCustomerInstructionsEndpoint" address="/determineEligibleCustomerInstructions"
                           wsdlURL="classpath:/schema/Interfaces/MM_IN_CommonInboundFlow_IA_DetermineEligibleCustomerInstructionsExport1.wsdl"
                           serviceClass="lb_gbo_sales.interfaces.ia_determineelegiblecustomerinstructions.IADetermineEligibleCustomerInstructions"
                           serviceName="s:IA_DetermineEligibleCustomerInstructionsExport1_IA_DetermineEligibleCustomerInstructionsHttpService"
                           xmlns:s="http://LB_GBO_Sales/Interfaces/IA_DetermineElegibleCustomerInstructions/Binding2">
        <cxf-camel:properties>
            <entry key="faultStackTraceEnabled" value="true" />
        </cxf-camel:properties>

        <cxf-camel:features>
            <bean class="org.apache.cxf.feature.StaxTransformFeature">
                <!-- Real clients may send messages which namespace the request element wrongly. -->
                <property name="inTransformElements">
                    <map>
                        <entry key="{http://LB_GBO_Sales/Messages}request" value="request"/>
                    </map>
                </property>
                <property name="outAppendElements">
                    <map>
                        <entry key="{http://schemas.xmlsoap.org/soap/envelope/}Body"
                               value="{http://schemas.xmlsoap.org/soap/envelope/}Header="/>
                    </map>
                </property>
            </bean>
        </cxf-camel:features>
        <cxf-camel:inInterceptors>
            <ref bean="eligibilityCxfLoggingInInterceptor"/>
        </cxf-camel:inInterceptors>
        <cxf-camel:outInterceptors>
            <ref bean="eligibilityCxfLoggingOutInterceptor"/>
        </cxf-camel:outInterceptors>
        <cxf-camel:outFaultInterceptors>
            <bean class="com.lloydsbanking.salsa.interceptors.fault.CxfFaultOutInterceptor"/>
        </cxf-camel:outFaultInterceptors>
    </cxf-camel:cxfEndpoint>

    <!--
 For CXF endpoint definitions made like this, the address attribute is host/port-relative.Cf
 http://qnalist.com/questions/2220245/cxf-endpoint-no-service-was-found-issue.

  The serviceName attribute is required, even though it's specified in the WSDL.  And because you can't
  currently include namespace definitions in this attribute, e.g. "http:{bla}serviceName", you need to declare
  the namespace by an xmlns: declaration.
-->
    <cxf-camel:cxfEndpoint id="determineEligibleCustomerInstructionsWZEndpoint" address="/determineEligibleCustomerInstructionsWZ"
                           wsdlURL="classpath:/schema/TSK_SalesProcessManagement_Exp_IA_DetermineEligibleCustomerInstructions_SOAP.wsdl"
                           serviceClass="lib_sim_salesprocessmanagement.ia_determineeligiblecustomerinstruction.IADetermineEligibleCustomerInstructions"
                           serviceName="s:Exp_IA_DetermineEligibleCustomerInstructions_SOAP_IA_DetermineEligibleCustomerInstructionsHttpService"
                           xmlns:s="http://LIB_SIM_SalesProcessManagement/IA_DetermineEligibleCustomerInstruction/Binding">
        <cxf-camel:properties>
            <entry key="faultStackTraceEnabled" value="true" />
        </cxf-camel:properties>

        <cxf-camel:features>
            <bean class="org.apache.cxf.feature.StaxTransformFeature">
                <!-- Real clients may send messages which namespace the request element wrongly. -->
                <property name="inTransformElements">
                    <map>
                        <entry key="{http://LIB_SIM_SalesProcessManagement/Messages}request" value="request"/>
                    </map>
                </property>
                <property name="outAppendElements">
                    <map>
                        <entry key="{http://schemas.xmlsoap.org/soap/envelope/}Body"
                               value="{http://schemas.xmlsoap.org/soap/envelope/}Header="/>
                    </map>
                </property>
            </bean>
        </cxf-camel:features>
        <cxf-camel:inInterceptors>
            <ref bean="eligibilityCxfLoggingInInterceptor"/>
        </cxf-camel:inInterceptors>
        <cxf-camel:outInterceptors>
            <ref bean="eligibilityCxfLoggingOutInterceptor"/>
        </cxf-camel:outInterceptors>
        <cxf-camel:outFaultInterceptors>
            <bean class="com.lloydsbanking.salsa.interceptors.fault.CxfFaultOutInterceptor"/>
        </cxf-camel:outFaultInterceptors>
    </cxf-camel:cxfEndpoint>


    <bean id="eligibilityCxfLoggingInInterceptor"
          class="com.lloydsbanking.salsa.logging.interceptor.ServiceCxfLoggingInInterceptor">
        <constructor-arg ref="cxfLoggingInInterceptor"/>
    </bean>


    <bean id="eligibilityCxfLoggingOutInterceptor"
          class="com.lloydsbanking.salsa.logging.interceptor.ServiceCxfLoggingOutInterceptor">
        <constructor-arg ref="cxfLoggingOutInterceptor"/>
    </bean>

    <!--
              When running in WAS, Salsa apps have their SSL connection properties configured by the container.  In order for this
              configuration to be picked up, CXF has to be configured to use the Java default (mechanism for deriving an) SSLFactory.
            -->
    <cxf-http-conf:conduit name="*.http-conduit">
        <cxf-http-conf:tlsClientParameters disableCNCheck="true" useHttpsURLConnectionDefaultSslSocketFactory="true"/>
    </cxf-http-conf:conduit>

</beans>
